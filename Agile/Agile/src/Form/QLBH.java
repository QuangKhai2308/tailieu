/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import Controller.QLDH;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.sql.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class QLBH extends javax.swing.JInternalFrame {

    /**
     * Creates new form QLBH
     */
    String user = "sa";
    String pass = "23082001";
    Connection conn;
    String url = "jdbc:sqlserver://localhost:1433;databaseName = QLBH";
    Locale locale = new Locale("vi", "VN");
    NumberFormat current = NumberFormat.getCurrencyInstance(locale);
    List<QLDH> ListDH = new ArrayList<>();
    DefaultTableModel model;
    int index;

    public QLBH() {
        initComponents();
        conn = getConnection();

    }

    protected Connection getConnection() {
        Connection conn = null;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url, user, pass);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return conn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtMaHD = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNgayBan = new javax.swing.JTextField();
        cboMaNV = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtTenNV = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        txtMaKH = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cboMaSP = new javax.swing.JComboBox<>();
        cboTenSP = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cboMauSac = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cboSize = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        txtGiaSP = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtGiamGia = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtThanhTien = new javax.swing.JTextField();
        txtSoLuong = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnThoat = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListSP = new javax.swing.JTable();
        bnTSP = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setPreferredSize(new java.awt.Dimension(1225, 655));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(1225, 662));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(1225, 620));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        lblTitle.setText("Quản Lí Bán Hàng");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Mã hóa đơn");

        txtMaHD.setEditable(false);
        txtMaHD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Thông tin nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 20))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Ngày bán");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Mã nhân viên");

        txtNgayBan.setEditable(false);
        txtNgayBan.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNgayBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayBanActionPerformed(evt);
            }
        });

        cboMaNV.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboMaNV.setEnabled(false);
        cboMaNV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMaNVItemStateChanged(evt);
            }
        });
        cboMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMaNVActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Tên nhân viên");

        txtTenNV.setEditable(false);
        txtTenNV.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtTenNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenNVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(49, 49, 49)
                        .addComponent(txtNgayBan, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(cboMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayBan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboMaNV, jLabel3});

        jPanel3.setBackground(new java.awt.Color(255, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Thông tin khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 20))); // NOI18N

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Mã khách hàng");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("Tên khách hàng");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel22.setText("Số điện thoại");

        txtSDT.setEditable(false);
        txtSDT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });

        txtTenKH.setEditable(false);
        txtTenKH.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtTenKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenKHActionPerformed(evt);
            }
        });

        txtMaKH.setEditable(false);
        txtMaKH.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtMaKH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaKHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSDT, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(txtMaKH, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 204, 204));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Thông tin sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 20))); // NOI18N

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setText("Mã sản phẩm");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Số lượng");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Tên sản phẩm");

        cboMaSP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboMaSP.setEnabled(false);
        cboMaSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMaSPItemStateChanged(evt);
            }
        });
        cboMaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMaSPActionPerformed(evt);
            }
        });

        cboTenSP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboTenSP.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Màu sắc");

        cboMauSac.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboMauSac.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("Size");

        cboSize.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboSize.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Giá sản phẩm");

        txtGiaSP.setEditable(false);
        txtGiaSP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setText("Giảm giá(%)");

        txtGiamGia.setEditable(false);
        txtGiamGia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Thành tiền");

        txtThanhTien.setEditable(false);
        txtThanhTien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtSoLuong.setEditable(false);
        txtSoLuong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(cboTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGiaSP))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(67, 67, 67)
                                .addComponent(cboMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(81, 81, 81)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtThanhTien)
                            .addComponent(txtGiamGia))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtGiaSP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cboMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboMaSP, jLabel23});

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboTenSP, jLabel10, jLabel9, txtSoLuong});

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboMauSac, jLabel11});

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboSize, jLabel12});

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add.png"))); // NOI18N
        btnAdd.setText("Tạo mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/refresh (2).png"))); // NOI18N
        btnUpdate.setText("Cập nhật");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/remove.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setEnabled(false);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/save.png"))); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnThoat.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnThoat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/logout.png"))); // NOI18N
        btnThoat.setText("Thoát");

        jPanel10.setBackground(new java.awt.Color(255, 204, 204));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Giỏ hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        tblListSP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblListSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ngày", "Mã nhân viên", "Tên nhân viên", "Mã hóa đơn", "Mã sản phẩm", "Tên sản phẩm", "Màu sắc", "Size", "Số lượng", "Giá bán", "Giảm giá(%)", "Thành tiền", "Mã khách hàng", "Tên khách hàng", "Số điện thoại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListSPMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListSP);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1128, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bnTSP.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        bnTSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/plus (2).png"))); // NOI18N
        bnTSP.setText("Thêm SP");
        bnTSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnTSPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnXoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnThoat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bnTSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1)
                        .addGap(20, 20, 20)
                        .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bnTSP, btnAdd, btnSave, btnThoat, btnUpdate, btnXoa});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bnTSP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bnTSP, btnAdd, btnSave, btnThoat, btnUpdate, btnXoa});

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1209, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNgayBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayBanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayBanActionPerformed

    private void txtTenNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenNVActionPerformed

    private void txtSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTActionPerformed

    private void txtTenKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenKHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenKHActionPerformed

    private void txtMaKHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaKHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaKHActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        unEnditable();
        fetechMaNV();
        cboMaNV.setSelectedIndex(-1);
        fetchMaSP();
        cboMaSP.setSelectedIndex(-1);
        ClearForm();
        cboMauSac.setSelectedIndex(-1);
        cboSize.setSelectedIndex(-1);
        cboTenSP.setSelectedIndex(-1);
    }//GEN-LAST:event_btnAddActionPerformed
    protected boolean checkMaKH() {
        String query = "SELECT * FROM KHACHHANG";
//        boolean check = false;
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                if (txtMaKH.getText().equalsIgnoreCase(rs.getString("ID_KH"))) {
                    return false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }

    protected void addKH() {
        String query = "INSERT INTO KHACHHANG(TEN_KH, PHONE) OUTPUT INSERTED.ID_KH"
                + "VALUES(?, ?)";

        if (checkMaKH()) {

        }
    }

    protected void InsertKH() {
        String query_KH = "INSERT INTO KHACHHANG(ID_KH, TEN_KH, PHONE)"
                + "VALUES(?, ?, ?)";
        try {
            PreparedStatement ps = conn.prepareStatement(query_KH);
            ps.setString(1, txtMaKH.getText());
            ps.setNString(2, txtTenKH.getText());
            ps.setString(3, txtSDT.getText());
            ps.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void InsertHD() {
        String query_HD = "INSERT INTO HOADON(ID_HD, ID_NV, ID_KH, NGMUA, TONGTIEN)"
                + "VALUES(?, ?, ?, ?, ?)";
        double TT = 0;
        for (int i = 0; i < ListDH.size(); i++) {
            QLDH x = ListDH.get(i);
            TT += x.getThanhTien();
        }
        try {
            PreparedStatement ps = conn.prepareStatement(query_HD);
            ps.setString(1, txtMaHD.getText());
            ps.setString(2, cboMaNV.getSelectedItem().toString());
            ps.setString(3, txtMaKH.getText());
            ps.setString(4, txtNgayBan.getText());
            ps.setDouble(5, TT);

            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
//    protected void checkMKH() {
//        
//    }

    protected boolean checkMaHD() {
        String query = "SELECT * FROM HOADON";
//        boolean check = false;
        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                if (txtMaHD.getText().equalsIgnoreCase(rs.getString("ID_HD"))) {
                    JOptionPane.showMessageDialog(this, "Mã hóa đơn đã tồn tại");
                    txtMaHD.setEditable(true);
                    txtMaHD.requestFocus();
                    return false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
//        String query_HD = "INSERT INTO HOADON(ID_HD, ID_NV, ID_KH, NGMUA, TONGTIEN) OUTPUT.INSERTED.ID_HD"
//                + "VALUES(?, ?, ?, ?, ?)";
//        String query_KH = "INSERT INTO KHACHHANG(ID_KH, TEN_KH, PHONE) OUTPUT.INSERTED_ID_KH"
//                + "VALUES(?, ?, ?)";
//        double TT = 0;
//        for (int i = 0; i < ListDH.size(); i++) {
//            QLDH x = ListDH.get(i);
//            TT += x.getThanhTien();
//        }
        String query_HDCT = "INSERT INTO HOADON_CHITIET(ID_HD, ID_SP, TEN_SP, MAUSAC, "
                + "SIZE, SOLUONG, NGAYMUA, GIA, DISCOUNT, THANHTIEN)"
                + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try {
//            if (checkNull() && checkNgay() && checkSoDT() && checkSo()) {
//                JOptionPane.showMessageDialog(this, "Thêm thành công");
//            }
            if (ListDH.size() > 0) {

//                ps.setString(1, txtMaKH.getText());
//                ps.setNString(2, txtTenKH.getText());
//                ps.setString(3, txtSDT.getText());
//                ps.executeUpdate();
//
//                ps = conn.prepareStatement(query_HD);
//                ps.setString(1, txtMaHD.getText());
//                ps.setString(2, txtNgayBan.getText());
//                ps.setString(3, cboMaNV.getSelectedItem().toString());
//                ps.setNString(4, txtMaKH.getText());
//                ps.setDouble(5, TT);
//
//                ps.executeUpdate();
                if (checkMaKH()) {
                    InsertKH();
                    InsertHD();
                    PreparedStatement ps;
                    for (int i = 0; i < ListDH.size(); i++) {
                        QLDH x = ListDH.get(i);
                        ps = conn.prepareStatement(query_HDCT);
                        ps.setString(1, x.getMaHD());
                        ps.setString(2, x.getMaSP());
                        ps.setNString(3, x.getTenSP());
                        ps.setNString(4, x.getMauSac());
                        ps.setInt(5, x.getSize());
                        ps.setInt(6, x.getSoLuong());

                        ps.setDate(7, x.getNgayBan());
                        ps.setDouble(8, x.getGiaSP());
                        ps.setDouble(9, x.getDiscount());
                        ps.setDouble(10, x.getThanhTien());

                        ps.executeUpdate();
                        ps.clearParameters();
                    }
                    JOptionPane.showMessageDialog(this, "Thêm thành công");
                    ListDH.clear();
                    fillToForm();
                    ClearForm();
                } else {
                    InsertHD();
                    PreparedStatement ps;
                    for (int i = 0; i < ListDH.size(); i++) {
                        QLDH x = ListDH.get(i);
                        ps = conn.prepareStatement(query_HDCT);
                        ps.setString(1, x.getMaHD());
                        ps.setString(2, x.getMaSP());
                        ps.setNString(3, x.getTenSP());
                        ps.setNString(4, x.getMauSac());
                        ps.setInt(5, x.getSize());
                        ps.setInt(6, x.getSoLuong());

                        ps.setDate(7, x.getNgayBan());
                        ps.setDouble(8, x.getGiaSP());
                        ps.setDouble(9, x.getDiscount());
                        ps.setDouble(10, x.getThanhTien());

                        ps.executeUpdate();
                        ps.clearParameters();
                    }
                    JOptionPane.showMessageDialog(this, "Thêm thành công");
                    ListDH.clear();
                    fillToForm();
                    ClearForm();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Chưa có sản phẩm nào tong giỏ hàng");
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cboMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMaNVActionPerformed
        // TODO add your handling code here:
        fill();
    }//GEN-LAST:event_cboMaNVActionPerformed
    private void fill() {
        String query = "SELECT * FROM NHANVIEN WHERE ID_NV = ?";

        try {
            if (cboMaNV.getSelectedIndex() == -1) {
                return;
            } else {
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, cboMaNV.getSelectedItem().toString());

                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    txtTenNV.setText(rs.getString("TEN_NV"));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void cboMaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMaSPActionPerformed
        // TODO add your handling code here:
        String query = "SELECT * FROM SANPHAM WHERE ID_SP = ?";

        try {
            cboTenSP.removeAllItems();
            cboMauSac.removeAllItems();
            cboSize.removeAllItems();
            if (cboMaSP.getSelectedIndex() == -1) {
                return;
            } else {
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, cboMaSP.getSelectedItem().toString());

                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
//                    DecimalFormat dcf = new DecimalFormat("###,###");
                    long Gia = rs.getLong("GIABAN");
                    cboTenSP.addItem(rs.getNString("TEN_SP"));
                    cboMauSac.addItem(rs.getNString("MAUSAC"));
                    cboSize.addItem(rs.getInt("SIZE") + "");
                    txtGiaSP.setText(Gia + "");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cboMaSPActionPerformed

    private void cboMaSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMaSPItemStateChanged
        // TODO add your handling code here:
        //        String query = "SELECT * FROM SANPHAM WHERE ID_SP = ?";
        //
        //        try {
        //            if (cboMaSP.getSelectedIndex() == -1) {
        //                return;
        //            } else {
        //                PreparedStatement ps = conn.prepareStatement(query);
        //                ps.setString(1, cboMaSP.getSelectedItem().toString());
        //
        //                ResultSet rs = ps.executeQuery();
        //                cboTenSP.removeAllItems();
        //                cboMauSac.removeAllItems();
        //                cboSize.removeAllItems();
        //                while (rs.next()) {
        //                    cboTenSP.addItem(rs.getNString("TEN_SP"));
        //                    cboMauSac.addItem(rs.getNString("MAUSAC"));
        //                    cboSize.addItem(rs.getInt("SIZE") + "");
        //                }
        //            }
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }
    }//GEN-LAST:event_cboMaSPItemStateChanged

    private void cboMaNVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMaNVItemStateChanged
        // TODO add your handling code here:
        //        String query = "SELECT * FROM NHANVIEN WHERE ID_NV = ?";
        //
        //        try {
        ////            cboMaNV.removeAllItems();
        //            if (cboMaNV.getSelectedIndex() == -1) {
        //                return;
        //            } else {
        //                PreparedStatement ps = conn.prepareStatement(query);
        //                ps.setString(1, cboMaNV.getSelectedItem().toString());
        //
        //                ResultSet rs = ps.executeQuery();
        //
        //                while (rs.next()) {
        //                    txtTenNV.setText(rs.getString("TEN_NV"));
        //                }
        //            }
        //
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }
    }//GEN-LAST:event_cboMaNVItemStateChanged

    private void bnTSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnTSPActionPerformed
        // TODO add your handling code here:

        if (checkNull() && checkNgay() && checkSoDT() && checkSo() && checkMaHD()) {
            try {
                txtMaHD.setEditable(false);
                addToForm();
                fillToForm();
                Reset();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_bnTSPActionPerformed

    private void tblListSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListSPMouseClicked
        // TODO add your handling code here:
        index = tblListSP.getSelectedRow();
        btnUpdate.setEnabled(true);
        btnXoa.setEnabled(true);
        if (index >= 0) {
            showDetails();
        }
    }//GEN-LAST:event_tblListSPMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        index = tblListSP.getSelectedRow();
        Date NgayMua = Date.valueOf(txtNgayBan.getText());
        String MaNV = cboMaNV.getSelectedItem().toString();
        String TenNV = txtTenNV.getText();
        String MaKH = txtMaKH.getText();
        String TenKH = txtTenKH.getText();
        String SDT = txtSDT.getText();
        String MaSP = cboMaSP.getSelectedItem().toString();
        String TenSP = cboTenSP.getSelectedItem().toString();
        String MauSac = cboMauSac.getSelectedItem().toString();
        String kt = cboSize.getSelectedItem().toString();
        int Size = Integer.parseInt(kt);
        int SoLuong = Integer.parseInt(txtSoLuong.getText());
        double GiaSP = Double.parseDouble(txtGiaSP.getText());
        double GiamGia = Double.parseDouble(txtGiamGia.getText());
        double ThanhTien = Double.parseDouble(txtThanhTien.getText());

        try {
            if (ListDH.size() > 0) {
                if (index >= 0) {
                    if (checkNull() && checkNgay() && checkSoDT() && checkSo() && checkMaHD()) {
                        ListDH.set(index, new QLDH(MaSP, NgayMua, MaNV, TenNV, MaKH, TenKH, SDT, MaSP, TenSP, GiaSP, SoLuong, MauSac, GiamGia, Size, ThanhTien));
                        JOptionPane.showMessageDialog(this, "Update thành công");
                        fillToForm();
                        ReadForm();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Giỏ hàng trống");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dữ liệu để cập nhật");
            return;
        }

    }//GEN-LAST:event_btnUpdateActionPerformed
    protected void Delete() {
        ListDH.remove(index);
    }
    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        index = tblListSP.getSelectedRow();
        if (index >= 0) {
            Delete();
            Reset();
            fillToForm();
        }
    }//GEN-LAST:event_btnXoaActionPerformed
    protected void fetechMaNV() {
        String query = "SELECT ID_NV FROM NHANVIEN";

        try {

            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            cboMaNV.removeAllItems();
            while (rs.next()) {
                cboMaNV.addItem(rs.getString("ID_NV"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    protected void fetchMaSP() {
        String query = "SELECT * FROM SANPHAM";

        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            cboMaSP.removeAllItems();
            while (rs.next()) {
                cboMaSP.addItem(rs.getString("ID_SP"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void fetchTenSP() {
        String query = "SELECT * FROM SANPHAM";

        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cboTenSP.addItem(rs.getString("Ten_SP"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void fetchMauSac() {
        String query = "SELECT * FROM SANPHAM";

        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cboMauSac.addItem(rs.getString("MAUSAC"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void fetchSize() {
        String query = "SELECT * FROM SANPHAM";

        try {
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                cboSize.addItem(rs.getString("SIZE"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean checkNull() {
        if (txtMaHD.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã hóa đơn chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtMaHD.requestFocus();
            return false;
        } else if (txtNgayBan.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ngày bán chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtNgayBan.requestFocus();
            return false;
        } else if (cboMaNV.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên chưa được chọn", "Text Empty", JOptionPane.ERROR_MESSAGE);
            cboMaNV.requestFocus();
            return false;
        } else if (txtTenNV.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên nhân viên chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtTenNV.requestFocus();
            return false;
        } else if (txtMaKH.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã khách hàng chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtMaKH.requestFocus();
            return false;
        } else if (txtTenKH.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên khách hàng chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtTenKH.requestFocus();
            return false;
        } else if (txtSDT.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện thoại khách hàng chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtSDT.requestFocus();
            return false;
        } else if (cboMaSP.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Mã sản phẩm chưa được chọn", "Text Empty", JOptionPane.ERROR_MESSAGE);
            cboMaSP.requestFocus();
            return false;
        } else if (cboTenSP.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Tên sản phẩm chưa được chọn", "Text Empty", JOptionPane.ERROR_MESSAGE);
            cboTenSP.requestFocus();
            return false;
        } else if (txtGiaSP.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Giá sản phẩm chưa được chọn", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtGiaSP.requestFocus();
            return false;
        } else if (txtSoLuong.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số lượng sản phẩm chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtSoLuong.requestFocus();
            return false;
        } else if (cboMauSac.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Màu sắc sản phẩm chưa được chọn", "Text Empty", JOptionPane.ERROR_MESSAGE);
            cboMauSac.requestFocus();
            return false;
        } else if (txtGiamGia.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Giảm giá sản phẩm chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtGiamGia.requestFocus();
            return false;
        } else if (cboSize.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Size sản phẩm chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            cboSize.requestFocus();
            return false;
        } else if (txtThanhTien.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Thành tiền sản phẩm chưa được nhập", "Text Empty", JOptionPane.ERROR_MESSAGE);
            txtThanhTien.requestFocus();
            return false;
        }
        return true;
    }

    protected QLDH ReadForm() {
        String MaHD = txtMaHD.getText();
        Date NgayBan = Date.valueOf(txtNgayBan.getText());
        String MaNV = cboMaNV.getSelectedItem().toString();
        String TenNV = txtTenNV.getText();

        String MaKH = txtMaKH.getText();
        String TenKH = txtTenKH.getText();
        String SDT = txtSDT.getText();

        String MaSP = cboMaSP.getSelectedItem().toString();
        String TenSP = cboTenSP.getSelectedItem().toString();
        double GiaSP = Double.parseDouble(txtGiaSP.getText());
        int SoLuong = Integer.parseInt(txtSoLuong.getText());

        String MauSac = cboMauSac.getSelectedItem().toString();
        double Discount = Double.parseDouble(txtGiamGia.getText());
        String kt = cboSize.getSelectedItem().toString();
        int Size = Integer.parseInt(kt);
        double ThanhTien = Double.parseDouble(txtThanhTien.getText());

        QLDH qlbh = new QLDH(MaHD, NgayBan, MaNV, TenNV, MaKH, TenKH, SDT, MaSP,
                TenSP, GiaSP, SoLuong, MauSac, Discount, Size, ThanhTien);
        return qlbh;
    }

    protected void addToForm() {
        QLDH qlbh = ReadForm();
        ListDH.add(qlbh);

    }

    protected void fillToForm() {
        model = (DefaultTableModel) tblListSP.getModel();
        model.setRowCount(0);

        for (QLDH x : ListDH) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            model.addRow(new Object[]{sdf.format(x.getNgayBan()), x.getMaNV(), x.getTenNV(),
                x.getMaHD(), x.getMaSP(), x.getTenSP(), x.getMauSac(), x.getSize(),
                x.getSoLuong(), x.getGiaSP(), x.getDiscount(), x.getThanhTien(),
                x.getMaKH(), x.getTenKH(), x.getSDT()});
        }
    }

    protected void Reset() {
        cboMaSP.setSelectedIndex(-1);
        cboTenSP.setSelectedIndex(-1);
        cboMauSac.setSelectedIndex(-1);
        cboSize.setSelectedIndex(-1);
        txtSoLuong.setText("");
        txtGiaSP.setText("");
        txtGiamGia.setText("");
        txtThanhTien.setText("");
    }

    private boolean checkSoDT() {
        String parrent = "0\\d{9}";
//        String sdt = txtSDT.getText();
        try {
//            int checkSDT= Integer.parseInt(sdt);
            if (!txtSDT.getText().matches(parrent)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không đúng định dạng");
                txtSDT.requestFocus();
                return false;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải là số");
            txtSDT.requestFocus();
            return false;
        }
        return true;
    }

    private boolean checkSo() {
        String GiaSP = txtGiaSP.getText();
        try {
            double CheckGia = Double.parseDouble(GiaSP);
            if (CheckGia <= 0) {
                JOptionPane.showMessageDialog(this, "Giá sản phẩm không được âm", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtGiaSP.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Giá sản phẩm phải là số", "Type error", JOptionPane.ERROR_MESSAGE);
            txtGiaSP.requestFocus();
            return false;
        }

        String SoLuong = txtSoLuong.getText();
        try {
            double CheckSL = Double.parseDouble(SoLuong);
            if (CheckSL <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng sản phẩm không được âm", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtSoLuong.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số lượng sản phẩm phải là số", "Type error", JOptionPane.ERROR_MESSAGE);
            txtSoLuong.requestFocus();
            return false;
        }

        String GiamGia = txtGiamGia.getText();
        try {
            double checkGiamGia = Double.parseDouble(GiamGia);
            if (checkGiamGia < 0) {
                JOptionPane.showMessageDialog(this, "Giảm giá sản phẩm không được âm", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtGiamGia.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Giảm giá sản phẩm phải là số", "Type error", JOptionPane.ERROR_MESSAGE);
            txtGiamGia.requestFocus();
            return false;
        }
        String ThanhTien = txtThanhTien.getText();
        try {
            double checkTT = Double.parseDouble(ThanhTien);
            if (checkTT < 0) {
                JOptionPane.showMessageDialog(this, "Thành tiền không được âm", "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtThanhTien.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Thành tiền phải là số", "Type error", JOptionPane.ERROR_MESSAGE);
            txtThanhTien.requestFocus();
            return false;
        }
        return true;
    }

    private boolean checkNgay() {
        Date date;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
//            (Date) sdf.parse(txtNgayBan.getText())
            date = Date.valueOf(txtNgayBan.getText());
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ngày bán sản phẩm phải đúng định dạng yyyy-MM-dd",
                    "Type error", JOptionPane.ERROR_MESSAGE);
            txtNgayBan.requestFocus();
            return false;
        }
    }

    private void unEnditable() {
        txtMaHD.setEditable(true);
        txtNgayBan.setEditable(true);
        cboMaNV.setEnabled(true);
        txtMaKH.setEditable(true);
        txtTenKH.setEditable(true);
        txtSDT.setEnabled(true);
        cboMaSP.setEnabled(true);
        cboTenSP.setEnabled(true);
        txtGiaSP.setEditable(true);
        cboMauSac.setEnabled(true);
        cboSize.setEnabled(true);
        txtGiamGia.setEditable(true);
        txtThanhTien.setEditable(true);
        txtTenNV.setEditable(true);
        txtSDT.setEditable(true);
        txtSoLuong.setEditable(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnTSP;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnThoat;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboMaNV;
    private javax.swing.JComboBox<String> cboMaSP;
    private javax.swing.JComboBox<String> cboMauSac;
    private javax.swing.JComboBox<String> cboSize;
    private javax.swing.JComboBox<String> cboTenSP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblListSP;
    private javax.swing.JTextField txtGiaSP;
    private javax.swing.JTextField txtGiamGia;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtNgayBan;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenKH;
    private javax.swing.JTextField txtTenNV;
    private javax.swing.JTextField txtThanhTien;
    // End of variables declaration//GEN-END:variables
    private void ClearForm() {
        txtNgayBan.setText("");
        txtTenNV.setText("");
        txtMaKH.setText("");
        txtTenKH.setText("");
        txtSDT.setText("");

        txtGiaSP.setText("");
        txtSoLuong.setText("");
        txtGiamGia.setText("");
        txtThanhTien.setText("");
        txtMaHD.setText("");
        txtMaHD.setEditable(true);

        cboSize.setSelectedIndex(-1);
        cboMauSac.setSelectedIndex(-1);
        cboMaNV.setSelectedIndex(-1);
        cboMaSP.setSelectedIndex(-1);
        cboTenSP.setSelectedIndex(-1);
//        cboMaSP.removeAllItems();
//        cboTenSP.removeAllItems();
//        cboMaNV.removeAllItems();
    }

    protected void showDetails() {
        QLDH x = ListDH.get(index);

        txtMaHD.setText(x.getMaHD());
        txtNgayBan.setText(x.getNgayBan() + "");
        cboMaNV.setSelectedItem(x.getMaNV());
        txtTenNV.setText(x.getTenNV());

        txtMaKH.setText(x.getMaKH());
        txtTenKH.setText(x.getTenKH());
        txtSDT.setText(x.getSDT());

        cboMaSP.setSelectedItem(x.getMaSP());
        cboTenSP.setSelectedItem(x.getTenSP());
        cboMauSac.setSelectedItem(x.getMauSac());
        cboSize.setSelectedItem(x.getSize());
        txtGiaSP.setText(x.getGiaSP() + "");
        txtSoLuong.setText(x.getSoLuong() + "");
        txtGiamGia.setText(x.getDiscount() + "");
        txtThanhTien.setText(x.getThanhTien() + "");
    }
}
